AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  AppName:
    Description: The name of the application.
    Type: String
  S3BucketName:
    Description: The name of the existing S3 bucket which has installation files.
    Type: String

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and UDP access from specific IP addresses
      VpcId: !Sub "{{resolve:ssm:/cfn/${AppName}/vpcid}}"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub "{{resolve:ssm:/cfn/${AppName}/mgmt-sourceip}}"
        - IpProtocol: udp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Sub "{{resolve:ssm:/cfn/${AppName}/user-sourceip}}"
      GroupName: !Sub "${AWS::StackName}-SecurityGroup"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecurityGroup"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-EC2Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:ListBucket"
                Resource: !Sub "arn:aws:s3:::${S3BucketName}"
                Condition:
                  StringLike:
                    "s3:prefix":
                      - !Sub "${AppName}/*"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/${AppName}/*"
              - Effect: Allow
                Action:
                  - "ssm:PutParameter"
                  - "ssm:Get*"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cfn/${AppName}/*"

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.small
      ImageId: !Sub "{{resolve:ssm:/cfn/${AppName}/imageid}}"
      KeyName: !Sub "{{resolve:ssm:/cfn/${AppName}/keypair-name}}"
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Sub "{{resolve:ssm:/cfn/${AppName}/subnetid}}"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Instance"
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 8
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Redirect all output to a log file
          exec > /var/log/user_data.log 2>&1
          set -x

          # Environment variables
          HOME_DIR=/home/ubuntu
          WORKSPACE_DIR=$HOME_DIR/workspace
          APP_NAME=${AppName}
          APP_DIR=$WORKSPACE_DIR/${AppName}
          APP_INSTALL_DIR=$APP_DIR/install

          # Update and install packages
          sudo apt update \
          && sudo apt install -y \
            unzip \
            zsh \
            git

          # Install AWS CLI
          sudo snap install aws-cli --classic

          # Create directories
          sudo -u ubuntu mkdir -p $WORKSPACE_DIR
          sudo -u ubuntu mkdir -p $APP_DIR

          # Setup zsh and my dotfiles
          sudo chsh -s $(which zsh) ubuntu
          sudo -u ubuntu git clone https://github.com/pooyavahidi/dotfiles $WORKSPACE_DIR/dotfiles
          sudo -u ubuntu bash -c "cd $WORKSPACE_DIR/dotfiles && source bootstrap.sh"

          # Download the app from S3
          sudo -u ubuntu aws s3 cp s3://${S3BucketName}/${AppName}/install $APP_INSTALL_DIR --recursive

          # Set environment variables for the app installation and execution
          sudo -u ubuntu cp $APP_INSTALL_DIR/extra.sh $HOME_DIR/.extra
          sed -i "2i export CFN_STACK_NAME=${AWS::StackName}" $HOME_DIR/.extra
          sed -i "2i export APP_NAME=$APP_NAME" $HOME_DIR/.extra
          sed -i "2i export APP_DIR=$APP_DIR" $HOME_DIR/.extra
          sed -i "2i export APP_INSTALL_DIR=$APP_INSTALL_DIR" $HOME_DIR/.extra
          sed -i "2i export S3_BUCKET=${S3BucketName}" $HOME_DIR/.extra

          # Install the app
          sudo -u ubuntu chmod +x $APP_INSTALL_DIR/install.sh
          sudo -u ubuntu $APP_INSTALL_DIR/install.sh

Outputs:
  InstancePublicIp:
    Description: The public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
