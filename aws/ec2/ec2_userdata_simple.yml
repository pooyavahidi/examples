AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  AppName:
    Description: The name of the application.
    Type: String
  S3BucketName:
    Description: The name of the existing S3 bucket which has installation files.
    Type: String

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and UDP access from specific IP addresses
      VpcId: !Sub "{{resolve:ssm:/cfn/${AppName}/vpcid}}"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub "{{resolve:ssm:/cfn/${AppName}/mgmt-sourceip}}"
        - IpProtocol: udp
          FromPort: 8000
          ToPort: 8000
          CidrIp: !Sub "{{resolve:ssm:/cfn/${AppName}/user-sourceip}}"
      GroupName: !Sub "${AWS::StackName}-SecurityGroup"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecurityGroup"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-EC2Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:ListBucket"
                Resource: !Sub "arn:aws:s3:::${S3BucketName}"
                Condition:
                  StringLike:
                    "s3:prefix":
                      - !Sub "${AppName}/*"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/${AppName}/*"

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.small
      ImageId: !Sub "{{resolve:ssm:/cfn/${AppName}/imageid}}"
      KeyName: !Sub "{{resolve:ssm:/cfn/${AppName}/keypair-name}}"
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Sub "{{resolve:ssm:/cfn/${AppName}/subnetid}}"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Instance"
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 8
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Redirect all output to a log file
          exec > /var/log/user-data.log 2>&1
          set -x

          # Environment variables
          HOME_DIR=/home/ubuntu
          WORKSPACE_DIR=$HOME_DIR/workspace
          APP_DIR=$WORKSPACE_DIR/${AppName}

          # Update and install packages
          sudo apt update \
          && sudo apt install -y \
            unzip \
            zsh \
            git

          # Install AWS CLI
          sudo snap install aws-cli --classic

          # Create directories
          sudo -u ubuntu mkdir -p $WORKSPACE_DIR
          sudo -u ubuntu mkdir -p $APP_DIR

          # Setup zsh and my dotfiles
          sudo chsh -s $(which zsh) ubuntu
          sudo -u ubuntu git clone https://github.com/pooyavahidi/dotfiles $WORKSPACE_DIR/dotfiles
          sudo -u ubuntu bash -c "cd $WORKSPACE_DIR/dotfiles && source bootstrap.sh"

          # Download the app from S3
          sudo -u ubuntu aws s3 cp s3://${S3BucketName}/${AppName}/install $APP_DIR --recursive

          # Install the app
          sudo -u ubuntu chmod +x $APP_DIR/install.sh
          sudo -u ubuntu $APP_DIR/install.sh

  StopEC2LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-StopEC2LambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-StopEC2Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:StopInstances
                  - ec2:DescribeInstances
                Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${EC2Instance}"

  StopEC2LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-StopEC2LambdaFunction"
      Handler: index.handler
      Role: !GetAtt StopEC2LambdaRole.Arn
      Runtime: python3.13
      Code:
        ZipFile: |
          import boto3
          import os

          def handler(event, context):
              ec2 = boto3.client('ec2')
              instance_id = os.environ['INSTANCE_ID']
              try:
                  ec2.stop_instances(InstanceIds=[instance_id])
                  print(f"Successfully stopped instance {instance_id}")
              except Exception as e:
                  print(f"Failed to stop instance {instance_id}: {e}")

      Environment:
        Variables:
          INSTANCE_ID: !Ref EC2Instance

  StopEC2LambdaSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 10 * * ? *)
      Targets:
        - Arn: !GetAtt StopEC2LambdaFunction.Arn
          Id: StopEC2LambdaFunction

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StopEC2LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StopEC2LambdaSchedule.Arn

Outputs:
  SecurityGroupId:
    Description: The ID of the created security group
    Value: !Ref SecurityGroup
